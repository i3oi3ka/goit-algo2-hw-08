import random
import time
from functools import lru_cache  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≥–æ—Ç–æ–≤–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
from typing import Tuple

# --- –ö–ª–∞—Å LRUCache —Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—ó range/update_with_cache –≤–∏–¥–∞–ª–µ–Ω—ñ ---
# ...

# --- 2. –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–ø–∏—Ç—ñ–≤ (–±–µ–∑ –∑–º—ñ–Ω) ---


def make_queries(n, q, hot_pool=30, p_hot=0.95, p_update=0.03):
    """–ì–µ–Ω–µ—Ä—É—î —Å–ø–∏—Å–æ–∫ "–≥–∞—Ä—è—á–∏—Ö" —Ç–∞ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—É–ª "–≥–∞—Ä—è—á–∏—Ö" –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ–≤
    hot = [
        (random.randint(0, n // 2), random.randint(n // 2, n - 1))
        for _ in range(hot_pool)
    ]

    queries = []
    for _ in range(q):
        if random.random() < p_update:  # ~3% –∑–∞–ø–∏—Ç—ñ–≤ ‚Äî Update
            idx = random.randint(0, n - 1)
            val = random.randint(1, 100)
            queries.append(("Update", idx, val))
        else:  # ~97% ‚Äî Range
            if random.random() < p_hot:  # 95% ‚Äî ¬´–≥–∞—Ä—è—á—ñ¬ª –¥—ñ–∞–ø–∞–∑–æ–Ω–∏
                left, right = random.choice(hot)
            else:  # 5% ‚Äî –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏
                left = random.randint(0, n - 1)
                right = random.randint(left, n - 1)
            queries.append(("Range", left, right))
    return queries


# --- 3. –§—É–Ω–∫—Ü—ñ—ó –ë–ï–ó –∫–µ—à—É–≤–∞–Ω–Ω—è (–±–µ–∑ –∑–º—ñ–Ω) ---


def range_sum_no_cache(array, left, right):
    """–û–±—á–∏—Å–ª—é—î —Å—É–º—É '–≤ –ª–æ–±', –ø—Ä–æ—Ö–æ–¥—è—á–∏ –ø–æ –¥—ñ–∞–ø–∞–∑–æ–Ω—É."""
    return sum(array[left : right + 1])


def update_no_cache(array, index, value):
    """–ü—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤—ñ."""
    array[index] = value


# --- 4. –õ–æ–≥—ñ–∫–∞ –ó –∫–µ—à—É–≤–∞–Ω–Ω—è–º (–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º @lru_cache) ---


class CachedArrayHandler:
    """
    –Ü–Ω–∫–∞–ø—Å—É–ª—é—î –º–∞—Å–∏–≤ —Ç–∞ –º–µ—Ç–æ–¥–∏ —Ä–æ–±–æ—Ç–∏ –∑ –Ω–∏–º,
    –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ @lru_cache –¥–ª—è –º–µ—Ç–æ–¥—É get_sum.
    """

    def __init__(self, array_data, cache_capacity: int):
        self.array = array_data

        # –ú–∏ –Ω–µ –º–æ–∂–µ–º–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–∞—Å–∏—Ç–∏ get_sum –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º @lru_cache,
        # –æ—Å–∫—ñ–ª—å–∫–∏ cache_capacity - —Ü–µ –∑–º—ñ–Ω–Ω–∞.
        # –¢–æ–º—É –º–∏ "–ø—Ä–∏–∫—Ä–∞—à–∞—î–º–æ" –º–µ—Ç–æ–¥ –≤—Ä—É—á–Ω—É –ø—ñ–¥ —á–∞—Å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó.
        self.get_sum = lru_cache(maxsize=cache_capacity)(self._get_sum_internal)

    def _get_sum_internal(self, left: int, right: int) -> int:
        """
        –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –º–µ—Ç–æ–¥, —è–∫–∏–π —Ä–µ–∞–ª—å–Ω–æ –æ–±—á–∏—Å–ª—é—î —Å—É–º—É.
        –°–∞–º–µ –≤—ñ–Ω –±—É–¥–µ –∫–µ—à–æ–≤–∞–Ω–∏–π.
        """
        # print(f"Cache MISS for ({left}, {right})") # –î–ª—è –¥–µ–±–∞–≥—É
        return sum(self.array[left : right + 1])

    def update(self, index: int, value: int) -> None:
        """
        –û–Ω–æ–≤–ª—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –º–∞—Å–∏–≤—ñ —Ç–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—â—É—î –∫–µ—à.
        """
        # 1. –û–Ω–æ–≤–∏—Ç–∏ —Å–∞–º –º–∞—Å–∏–≤
        self.array[index] = value

        # 2. –Ü–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–µ—à—É
        # functools.lru_cache –Ω–µ –¥–æ–∑–≤–æ–ª—è—î –≤–∏–¥–∞–ª—è—Ç–∏ –æ–∫—Ä–µ–º—ñ
        # "–ø—Ä–æ—Ç—É—Ö–ª—ñ" –∫–ª—é—á—ñ. –ú–∏ –∑–º—É—à–µ–Ω—ñ –æ—á–∏—Å—Ç–∏—Ç–∏ –í–ï–°–¨ –∫–µ—à.
        self.get_sum.cache_clear()


# --- 5. –ì–æ–ª–æ–≤–Ω–∏–π –±–ª–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ---


def main():
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏–º—É–ª—è—Ü—ñ—ó
    N = 100_000  # –†–æ–∑–º—ñ—Ä –º–∞—Å–∏–≤—É
    Q = 50_000  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
    K = 1000  # –Ñ–º–Ω—ñ—Å—Ç—å –∫–µ—à—É

    # --- –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ ---
    print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {N} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Å–∏–≤—É...")
    base_array = [random.randint(1, 100) for _ in range(N)]

    print(f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è {Q} –∑–∞–ø–∏—Ç—ñ–≤ (3% Update, 95% '–≥–∞—Ä—è—á–∏—Ö' Range)...")
    queries = make_queries(N, Q)
    print("–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

    # --- –¢–µ—Å—Ç 1: –ë–ï–ó –∫–µ—à—É ---
    print("--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ë–ï–ó –∫–µ—à—É ---")
    array_no_cache = list(base_array)
    start_time_no_cache = time.time()

    results_no_cache = []
    for query_type, *args in queries:
        if query_type == "Range":
            res = range_sum_no_cache(array_no_cache, args[0], args[1])
            results_no_cache.append(res)
        elif query_type == "Update":
            update_no_cache(array_no_cache, args[0], args[1])

    end_time_no_cache = time.time()
    time_taken_no_cache = end_time_no_cache - start_time_no_cache

    print(f"‚úÖ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±–µ–∑ –∫–µ—à—É: {time_taken_no_cache:.4f} —Å–µ–∫—É–Ω–¥")

    # --- –¢–µ—Å—Ç 2: –ó @lru_cache ---
    print(f"\n--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ó @lru_cache (K={K}) ---")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é –º–∞—Å–∏–≤—É —Ç–∞ –Ω–∞—à –æ–±'—î–∫—Ç-–æ–±–≥–æ—Ä—Ç–∫—É
    array_with_cache = list(base_array)
    handler = CachedArrayHandler(array_with_cache, cache_capacity=K)

    start_time_with_cache = time.time()

    results_with_cache = []
    for query_type, *args in queries:
        if query_type == "Range":
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–µ—à–æ–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥
            res = handler.get_sum(args[0], args[1])
            results_with_cache.append(res)
        elif query_type == "Update":
            # –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥, —è–∫–∏–π –æ–Ω–æ–≤–∏—Ç—å –º–∞—Å–∏–≤ —ñ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
            handler.update(args[0], args[1])

    end_time_with_cache = time.time()
    time_taken_with_cache = end_time_with_cache - start_time_with_cache

    print(f"‚úÖ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑ @lru_cache: {time_taken_with_cache:.4f} —Å–µ–∫—É–Ω–¥")

    # --- –ü—ñ–¥—Å—É–º–æ–∫ ---
    print("\n--- –†–ï–ó–£–õ–¨–¢–ê–¢–ò ---")
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–±—ñ–≥–∞—é—Ç—å—Å—è: {results_no_cache == results_with_cache}")

    if time_taken_with_cache > 0:
        speedup = time_taken_no_cache / time_taken_with_cache
        print(f"üöÄ –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ @lru_cache: {speedup:.2f}x")
    else:
        print("–í–∏–∫–æ–Ω–∞–Ω–Ω—è –±—É–ª–æ –Ω–∞–¥—Ç–æ —à–≤–∏–¥–∫–∏–º –¥–ª—è –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è.")

    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É: {handler.get_sum.cache_info()}")


if __name__ == "__main__":
    main()
